!function(){"use strict";const t=1674586015717,e=`cache${t}`,n=["/client/client.56dc2bed.js","/client/inject_styles.5607aec6.js","/client/pt-br.dc3891fb.js","/client/en.e90f03ce.js","/client/es.b51aed07.js","/client/index.20badcb2.js","/client/Products.77f7c0d8.js","/client/News.32183519.js","/client/Gallery.b17e8519.js","/client/Carousel.da41202f.js","/client/STab.725f338d.js","/client/SPagination.0e02aab3.js","/client/_layout.9b1dfdd1.js","/client/index.56d7df99.js","/client/HelpCard.64e4f8f5.js","/client/[slug].315d0b38.js","/client/Breadcrumb.3d491da6.js","/client/search.26f254f7.js","/client/[slug].cb6175cd.js","/client/SContent.705ebd35.js","/client/platform.05a17d47.js","/client/expo-bio-2022.5cd28466.js","/client/security.ed079fc1.js","/client/contact.c582df00.js","/client/index.ad6352e9.js","/client/[slug].53984e12.js","/client/pricing.1fa58124.js","/client/news.4accb4cc.js","/client/[slug].a55eee66.js"].concat(["/service-worker-index.html","/404.svg","/_phone.png","/bg-hero.svg","/bg-search.webp","/block.png","/cookie.png","/favicon-16x16.png","/favicon-32x32.png","/favicon-96x96.png","/feather-sprite.svg","/flag-pt-br.svg","/flag-spain.svg","/flag-us.svg","/fonts/Kanit-Black.woff","/fonts/Kanit-Black.woff2","/fonts/Kanit-Bold.woff","/fonts/Kanit-Bold.woff2","/fonts/Kanit-ExtraLight.woff","/fonts/Kanit-ExtraLight.woff2","/fonts/Kanit-Light.woff","/fonts/Kanit-Light.woff2","/fonts/Kanit-Medium.woff","/fonts/Kanit-Medium.woff2","/fonts/Kanit-Regular.woff","/fonts/Kanit-Regular.woff2","/fonts/Kanit-Thin.woff","/fonts/Kanit-Thin.woff2","/logo-192.png","/manifest.json","/phone.webp","/placeholder.jpg","/robots.txt","/selo-lgpd-banner.webp","/under-construction.svg"]),s=new Set(n);self.addEventListener("install",(t=>{t.waitUntil(caches.open(e).then((t=>t.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(t=>{t.waitUntil(caches.keys().then((async t=>{for(const n of t)n!==e&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const n=new URL(e.request.url),c=n.protocol.startsWith("http"),a=n.hostname===self.location.hostname&&n.port!==self.location.port,i=n.host===self.location.host&&s.has(n.pathname),o="only-if-cached"===e.request.cache&&!i;!c||a||o||e.respondWith((async()=>i&&await caches.match(e.request)||async function(e){const n=await caches.open(`offline${t}`);try{const t=await fetch(e);return n.put(e,t.clone()),t}catch(t){const s=await n.match(e);if(s)return s;throw t}}(e.request))())}))}();
